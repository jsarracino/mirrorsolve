DECLARE PLUGIN "mirrorsolve"

{

open Ltac_plugin
open Stdarg

}

VERNAC COMMAND EXTEND DebugFuns CLASSIFIED AS QUERY
| [ "ShowLibRefs" ] -> { 
    let msg = Main.debug_lib_refs () in 
    Feedback.msg_notice msg
  }
| [ "ShowCompTables" ] -> { 
    let msg = Main.debug_tbls () in 
    Feedback.msg_notice msg
  }
END

VERNAC COMMAND EXTEND RegisterInd CLASSIFIED AS QUERY
| [ "RegisterInd" constr(e) ] -> { 
    Main.reg_coq_ind_constr e
  }
| [ "RegisterConstrSize" constr(e) int(n) ] -> { 
    Main.reg_coq_sort_size e n
  }
| [ "RegisterPrim" constr(e) string(s) ] -> { 
    Main.reg_prim_name e s
  }
END

TACTIC EXTEND Pretty
| [ "pretty" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let out = Main.pretty env sigma e in

    Main.debug out 
  }
END


VERNAC COMMAND EXTEND ViewSMTQuery CLASSIFIED AS QUERY
| [ "PrintSMT" constr(e) string_list(vs) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let (sigma', e') = Constrintern.interp_constr_evars env sigma e in
      Feedback.msg_info (Pp.str "SMT QUERY:\n") ;
      Main.dump_query vs e'
  }
END

TACTIC EXTEND ViewSMTTactic 
| [ "print_smt" constr(e) string_list(vs) ] -> { 
    Feedback.msg_info (Pp.str "SMT QUERY:\n") ;
    Main.dump_query vs e ;
    Proofview.tclUNIT ()
  }
| [ "check_interp_pos" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let fail s = Tacticals.New.tclFAIL 0 (Pp.str s) in
    let query = Main.check_interp (EConstr.to_constr sigma e) false in
    Feedback.msg_info (Pp.str "SMT QUERY:\n") ;
    Feedback.msg_info (Pp.str query) ;
    Feedback.msg_info (Pp.str "RESULT:\n") ;

    begin match Smt.run_smt query with 
    | SAT -> Feedback.msg_info (Pp.str "SAT") ;
      Proofview.tclUNIT ()
    | UNSAT -> fail "UNSAT smt query"
    | Other msg -> fail ("Broken query: " ^ msg)
    end
  }
| [ "check_interp_neg" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let fail s = Tacticals.New.tclFAIL 0 (Pp.str s) in
    let query = Main.check_interp (EConstr.to_constr sigma e) true in
    Feedback.msg_info (Pp.str "SMT QUERY:\n") ;
    Feedback.msg_info (Pp.str query) ;
    Feedback.msg_info (Pp.str "RESULT:\n") ;

    begin match Smt.run_smt query with 
    | SAT -> Feedback.msg_info (Pp.str "SAT") ;
      Proofview.tclUNIT ()
    | UNSAT -> fail "UNSAT smt query"
    | Other msg -> fail ("Broken query: " ^ msg)
    end
  }
END