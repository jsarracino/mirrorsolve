DECLARE PLUGIN "mirrorsolve"

{

open Ltac_plugin
open Stdarg
open Tacarg

let tcl_fail = Tacticals.tclFAIL 0

}

VERNAC COMMAND EXTEND DebugFuns CLASSIFIED AS QUERY
| [ "ShowLibRefs" ] -> { 
    let msg = Main.debug_lib_refs () in 
    Feedback.msg_notice msg
  }
END

VERNAC COMMAND EXTEND RegisterFun CLASSIFIED AS QUERY
| [ "RegisterSMTFun" constr(e) string(nme) int(arity) ] -> {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let (_, e') = Constrintern.interp_constr_evars env sigma e in 
      Main.reg_sym e' nme arity 
  }
| [ "RegisterSMTBuiltin" constr(l) constr(r) ] -> {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let (sigma', l') = Constrintern.interp_constr_evars env sigma l in 
    let (_, r') = Constrintern.interp_constr_evars env sigma r in 
      Main.reg_builtin l' r'
  }
| [ "RegisterSMTSort" constr(l) constr(r) ] -> {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let (sigma', l') = Constrintern.interp_constr_evars env sigma l in 
    let (_, r') = Constrintern.interp_constr_evars env sigma' r in 
      Main.reg_sort l' r'
  }
| [ "RegisterCustomSort" constr(e) string(s) ] -> {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let (_, e') = Constrintern.interp_constr_evars env sigma e in 
      Main.reg_custom_sort e' s 
  }
| [ "RegisterSMTInd" constr(c_e) constr(decl_e) string(s) ] -> {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let _, c_e' = Constrintern.interp_constr_evars env sigma c_e in 
    let _, decl_e' = Constrintern.interp_constr_evars env sigma decl_e in 
      Main.reg_ind_decl s c_e' decl_e'
  }
| [ "RegisterSMTUF" string(nme) constr(ret) constr_list(args) ] -> {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let force e = snd (Constrintern.interp_constr_evars env sigma e) in 
      Main.reg_uf_decl nme (force ret) (List.map force args)
  }
END


TACTIC EXTEND Pretty
| [ "pretty" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let out = Main.pretty env sigma e in
      Main.debug out 
  }
END


VERNAC COMMAND EXTEND ViewSMTQuery CLASSIFIED AS QUERY
| [ "PrintSMT" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let (sigma', e') = Constrintern.interp_constr_evars env sigma e in
      Feedback.msg_info (Pp.str "SMT QUERY:\n") ;
      Main.dump_query e'
  }
END

TACTIC EXTEND DebugTactic 
| [ "print_tuple" constr(e) ] -> {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let e' = EConstr.to_constr sigma e in
    let bs = Main.c_n_tuple_to_bools e' in
    Feedback.msg_info (Main.print_bools bs); 
    Proofview.tclUNIT ()
  }
END

TACTIC EXTEND ViewSMTTactic 
| [ "print_smt" constr(e) ] -> { 
    Feedback.msg_info (Pp.str "SMT QUERY:\n") ;
    Main.dump_query e ;
    Proofview.tclUNIT ()
  }
END

TACTIC EXTEND CheckInterpPos 
| [ "check_interp_pos" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let fail s = tcl_fail (Pp.str s) in
    let query = Main.check_interp (EConstr.to_constr sigma e) false in

    begin match Smt.run_smt query with 
    | SAT -> 
      Proofview.tclUNIT ()
    | UNSAT -> fail "UNSAT smt query"
    | Other msg -> fail ("Broken query: " ^ msg)
    end
  }
END

TACTIC EXTEND CheckInterpNeg
| [ "check_interp_neg" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let fail s = tcl_fail (Pp.str s) in
    let query = Main.check_interp (EConstr.to_constr sigma e) true in

    begin match Smt.run_smt query with 
    | SAT -> 
      Proofview.tclUNIT ()
    | UNSAT -> fail "UNSAT smt query"
    | Other msg -> fail ("Broken query: " ^ msg)
    end
  }
END

TACTIC EXTEND CheckUnsatPos 
| [ "check_unsat_pos" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let fail s = tcl_fail (Pp.str s) in
    let query = Main.check_interp (EConstr.to_constr sigma e) false in

    begin match Smt.run_smt query with 
    | SAT -> fail "SAT smt query"
    | UNSAT -> Proofview.tclUNIT ()
    | Other msg -> fail ("Broken query: " ^ msg)
    end
  }
END

TACTIC EXTEND CheckUnsatNeg 
| [ "check_unsat_neg" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let fail s = tcl_fail (Pp.str s) in
    let query = Main.check_interp (EConstr.to_constr sigma e) true in

    begin match Smt.run_smt query with 
    | SAT -> fail "SAT smt query"
    | UNSAT -> Proofview.tclUNIT ()
    | Other msg -> fail ("Broken query: " ^ msg)
    end
  }
END

VERNAC COMMAND EXTEND SetBackend CLASSIFIED AS QUERY
| [ "SetSMTSolver" string(s) ] -> { 
    Main.set_backend_solver s
  }
END

TACTIC EXTEND DebugMemory
| ["print_mem"] ->  {
  let stats = Gc.stat () in
  let bytes = stats.Gc.top_heap_words * (Sys.word_size/8) in
  let msg = Pp.app (Pp.str "top_heap byte usage: ") (Pp.app (Pp.int bytes) (Pp.fnl ())) in 
  Feedback.msg_info msg;
  Proofview.tclUNIT ()
}
| ["measure_mem" constr(e)] ->  {
  let env = Global.env () in
  let sigma = Evd.from_env env in
  let e' = EConstr.to_constr sigma e in
  let repr = Obj.repr e' in
  let bytes = Obj.reachable_words repr * (Sys.word_size/8) in
  let msg = Pp.app (Pp.str "obj byte usage: ") (Pp.app (Pp.int bytes) (Pp.fnl ())) in 
  Feedback.msg_info msg;
  Proofview.tclUNIT ()
}
END


TACTIC EXTEND MapHintTbl 
| [ "hints_foreach" tactic(f) string(name) ] -> { 
    Hint.apply_hints f (Hint.lookup_tbl name)
  }
END