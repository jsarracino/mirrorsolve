DECLARE PLUGIN "mirrorsolve"

{

open Ltac_plugin
open Stdarg

}

VERNAC COMMAND EXTEND DebugFuns CLASSIFIED AS QUERY
| [ "ShowLibRefs" ] -> { 
    let msg = Main.debug_lib_refs () in 
    Feedback.msg_notice msg
  }
| [ "ShowCompTables" ] -> { 
    let msg = Main.debug_tbls () in 
    Feedback.msg_notice msg
  }
END

VERNAC COMMAND EXTEND RegisterInd CLASSIFIED AS QUERY
| [ "RegisterEnvCtors" constr_list(es) ] -> { 
    let worker e = 
      let env = Global.env () in
      let sigma = Evd.from_env env in
      let (sigma', e') = Constrintern.interp_constr_evars env sigma e in
        EConstr.to_constr sigma' e'
      in

    let es' = List.map worker es in 
    Main.reg_c_env_ctors es'
  }
| [ "ClearEnvCtors" ] -> { 
    Main.clear_env_ctors ()
  }
END

TACTIC EXTEND Pretty
| [ "pretty" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let out = Main.pretty env sigma e in
      Main.debug out 
  }
END


VERNAC COMMAND EXTEND ViewSMTQuery CLASSIFIED AS QUERY
| [ "PrintSMT" constr(e) string_list(vs) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let (sigma', e') = Constrintern.interp_constr_evars env sigma e in
      Feedback.msg_info (Pp.str "SMT QUERY:\n") ;
      Main.dump_query vs e'
  }
END

TACTIC EXTEND DebugTactic 
| [ "print_tuple" constr(e) ] -> {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let e' = EConstr.to_constr sigma e in
    let bs = Main.c_n_tuple_to_bools e' in
    Feedback.msg_info (Main.print_bools bs); 
    Proofview.tclUNIT ()
  }
END

TACTIC EXTEND ViewSMTTactic 
| [ "print_smt" constr(e) string_list(vs) ] -> { 
    Feedback.msg_info (Pp.str "SMT QUERY:\n") ;
    Main.dump_query vs e ;
    Proofview.tclUNIT ()
  }
| [ "check_interp_pos" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let fail s = Tacticals.New.tclFAIL 0 (Pp.str s) in
    let query = Main.check_interp (EConstr.to_constr sigma e) false in

    begin match Smt.run_smt query with 
    | SAT -> 
      Proofview.tclUNIT ()
    | UNSAT -> fail "UNSAT smt query"
    | Other msg -> fail ("Broken query: " ^ msg)
    end
  }
| [ "check_interp_neg" constr(e) ] -> { 
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let fail s = Tacticals.New.tclFAIL 0 (Pp.str s) in
    let query = Main.check_interp (EConstr.to_constr sigma e) true in

    begin match Smt.run_smt query with 
    | SAT -> 
      Proofview.tclUNIT ()
    | UNSAT -> fail "UNSAT smt query"
    | Other msg -> fail ("Broken query: " ^ msg)
    end
  }
END